plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0.24,6.2)'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
}
base {
    archivesName = "${mod_id}"
}
mixin {
    add(sourceSets.main, "${mod_id}.refmap.json")

    config("${mod_id}.mixins.json")
    config("${mod_id}.forge.mixins.json")
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

jarJar.enable()

minecraft {

    mappings channel: 'official', version: minecraft_version

    // Tell FG to not automtically create the reobf tasks, as we now use Official mappings at runtime, If you don't use them at dev time then you'll have to fix your reobf yourself.
    //reobf = false

    // This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
    // It is REQUIRED to be set to true for this template to function.
    // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    copyIdeResources = true

    // Automatically enable forge AccessTransformers if the file exists
    // This location is hardcoded in Forge and can not be changed.
    // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
    if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    runs {
        client {
            workingDirectory project.file('../run_client')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file('../run_server')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }
    }

}

repositories {
    flatDir { dirs 'libs' }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    minecraft("net.minecraftforge:forge:${minecraft_version}-${forge_version}")
    implementation('net.sf.jopt-simple:jopt-simple:5.0.4') { version { strictly '5.0.4' } }
    annotationProcessor("org.spongepowered:mixin:0.8.5-SNAPSHOT:processor")
    //Needs to be "implementation" when building and "compileOnly" in-dev for some frickin reason
    //implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.5"))
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.5"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.3.5")) {
        jarJar.ranged(it, "[0.3.5,)")
    }
    minecraftLibrary(jarJar("com.github.Keksuccino:japng:0.5.3")) {
        jarJar.ranged(it, "[0.5.3,)")
    }
    minecraftLibrary(jarJar("com.github.rtyley:animated-gif-lib-for-java:animated-gif-lib-1.7")) {
        jarJar.ranged(it, "[1.7,)")
    }
    implementation fg.deobf("maven.modrinth:konkrete:1.8.0-1.20-1.20.1-forge")
    implementation fg.deobf("maven.modrinth:melody:1.0.3-1.20.1-1.20.4-forge")
    implementation fg.deobf("maven.modrinth:rrls:4.0.6.1+mc1.20.1-forge")
    implementation fg.deobf("com.cinemamod:mcef:2.1.6-1.20.1")
    compileOnly project(":common")
}

// Exclude Fabric Loader from Forge
configurations {
    runtimeClasspath    { exclude group: 'net.fabricmc', module: 'fabric-loader' }
    developmentRuntimeClasspath {
        // Gradle 8 names used by ForgeGradle 6
        exclude group: 'net.fabricmc', module: 'fabric-loader'
    }
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}

jar.finalizedBy('reobfJar')
//jar.finalizedBy('jarJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
            fg.component(it)
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}

jar {
    manifest {
        attributes([
                "MixinConfigs": "${mod_id}.forge.mixins.json,${mod_id}.mixins.json,${mod_id}.late.mixins.json"
        ])
    }
}