plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.178'
    id 'java-library'
}
base {
    archivesName = "${mod_id}"
}

// Automatically enable neoforge AccessTransformers if the file exists
// This location is hardcoded in FML and can not be changed.
// https://github.com/neoforged/FancyModLoader/blob/a952595eaaddd571fbc53f43847680b00894e0c1/loader/src/main/java/net/neoforged/fml/loading/moddiscovery/ModFile.java#L118
if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
    minecraft.accessTransformers.file file('src/main/resources/META-INF/accesstransformer.cfg')
}
runs {
    configureEach {
        modSource project.sourceSets.main
    }
    client {
        workingDirectory project.file('../run_client')
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        dependencies {
            runtime 'com.github.Keksuccino:japng:0.5.3'
            runtime 'com.github.rtyley:animated-gif-lib-for-java:animated-gif-lib-1.7'
        }
    }
    server {
        workingDirectory project.file('../run_server')
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }
}

//Temporarily disabled tests so compiling doesn't fail until I figure out why tf neoforge:test fails
test {
    exclude '**/*'
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    flatDir { dirs 'libs' }
}

jarJar.enable()

dependencies {
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.10.2")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.10.2")
    implementation "net.neoforged:neoforge:${neoforge_version}"
    implementation "maven.modrinth:konkrete:1.9.9-1.21.4-neoforge"
    implementation "maven.modrinth:melody:1.0.10-1.21-neoforge"
    //Also needs to get added to the client run configuration (runs -> client -> dependencies) since it's a non-Minecraft library
    implementation(jarJar("com.github.Keksuccino:japng:0.5.3")) {
        jarJar.ranged(it, "[0.5.3,)")
    }
    implementation(jarJar("com.github.rtyley:animated-gif-lib-for-java:animated-gif-lib-1.7")) {
        jarJar.ranged(it, "[1.7,)")
    }
    implementation "it.crystalnest:fancy-entity-renderer-neoforge:$minecraft_version-$fer_version"
//    implementation "com.cinemamod:mcef:2.1.6-1.21.1"
    implementation "curse.maven:mcef-636236:6091756"
    compileOnly project(":common")
}

// Exclude Fabric Loader from NeoForge
configurations {
    runtimeClasspath    { exclude group: 'net.fabricmc', module: 'fabric-loader' }
    developmentRuntimeClasspath {
        // Gradle 8 names used by ForgeGradle 6
        exclude group: 'net.fabricmc', module: 'fabric-loader'
    }
}

// NeoGradle compiles the game, but we don't want to add our common code to the game's code++
Spec<Task> notNeoTask = { Task it -> !it.name.startsWith("neo") } as Spec<Task>

tasks.withType(JavaCompile).matching(notNeoTask).configureEach {
    source(project(":common").sourceSets.main.allSource)
    it.options.compilerArgs += ['-Xlint:-deprecation', '-Xlint:-removal']
}

tasks.withType(Javadoc).matching(notNeoTask).configureEach {
    source(project(":common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

tasks.withType(ProcessResources).matching(notNeoTask).configureEach {
    from project(":common").sourceSets.main.resources
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
