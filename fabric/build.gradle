
plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
    id 'fabric-loom' version '1.6-SNAPSHOT'
}

base {
    archivesName = "${mod_id}"
}

repositories {
    flatDir { dirs 'libs' }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-1.20.1:2023.09.03@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    implementation project(":common")
    include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.3.2")))
    include(implementation 'com.github.Keksuccino:japng:0.5.3')
    include(implementation 'com.github.rtyley:animated-gif-lib-for-java:animated-gif-lib-1.7')
    include(implementation 'org.joml:joml:1.10.8')
    modImplementation "maven.modrinth:melody:1.0.1-1.19.2-fabric"
    modImplementation "maven.modrinth:konkrete:1.8.0-1.19.1-1.19.2-fabric"
    modImplementation "maven.modrinth:modmenu:4.1.2"
    //This is only to fix the missing dependency error in-dev
    implementation group: 'ca.weblite', name: 'java-objc-bridge', version: '1.1'
}

loom {
    if (project(":common").file("src/main/resources/${mod_id}.accesswidener").exists()) {
        accessWidenerPath.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run_client")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run_server")
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
